(defwindow powermenu
  :monitor 0
  :stacking "bg"
  :windowtype "dock"
  :wm-ignore false
  :geometry (geometry
              :width "100%"
              :height "3%"); 40px
  (powermenu_layout))

(defwidget powermenu_layout []
  (box 
    :orientation "horizontal" 
    (box 
      :orientation "horizontal" 
      :halign "start"
      :space-evenly false
      (clock) 
      (workspaces :names {captures(active-workspaces, "\"[0-9]\"")} :current-id {captures(current-workspace-index, "[0-9]")[0][0]}) 
    )
    (music)
    (box (batt) (box :orientation "horizontal" :halign "end" :space-evenly false (key_layout)(datee)) )
  )
)

(defwidget batt []
  (box :class "clock-wrapper" :space-evenly false :halign "end" 
    (box :class "bordered-box clock-box"
      (label :text "${EWW_BATTERY["BAT0"]["capacity"]}%" :class "clock-lbl"))))

(defwidget clock []
  (box :class "clock-wrapper" :space-evenly false :halign "end" 
    (box :class "bordered-box clock-box"
      (label :text "${time.hour} : ${time.min}" :class "clock-lbl"))))

(defwidget key_layout []
  (box :space-evenly false :halign "end"
    (box :class "bordered-box key-layout-box"
      (label :text "${key-layout}" :class "key-layout-lbl"))))

(defwidget datee []
  (box :class "date-wrapper" :space-evenly false :halign "end"
    (box :class "bordered-box"
      (label :text "${time.year} ${time.fullMonth} ${time.day} - ${time.fullDay}" :class "date-lbl"))))

(defwidget music []
  (box :class "${music != "" ? "bordered-box" : "no-workspace" }"
       :orientation "h"
       :space-evenly false
       :halign "center"
    (label :class "music-lbl music-artist" :text {music != "" ? "ðŸŽµ${music[0]} " : ""})
    (label :class "music-lbl label-separator" :text {music != "" ? " | " : ""})
    (label :class "music-lbl music-title" :text {music != "" ? "${music[1]}" : ""})
  ))

(defwidget workspaces [names current-id]
  (box 
     ; :class "bordered-box"
     :orientation "h"
     :space-evenly false
     :halign "center"
      (workspaces-implementation :names names :current {replace(names[current-id][0], "\"", "")} :current-id current-id ))
  )

(defwidget workspaces-implementation [names current current-id]
  (box
    (box :class {"wrk " + (current == 1 ? "active-workspace" : (matches(names, 1) ? "exist-workspace" : "no-workspace"))} (label :text 1))
    (box :class {"wrk " + (current == 2 ? "active-workspace" : (matches(names, 2) ? "exist-workspace" : "no-workspace"))} (label :text 2))
    (box :class {"wrk " + (current == 3 ? "active-workspace" : (matches(names, 3) ? "exist-workspace" : "no-workspace"))} (label :text 3))
    (box :class {"wrk " + (current == 4 ? "active-workspace" : (matches(names, 4) ? "exist-workspace" : "no-workspace"))} (label :text 4))
    ; (box :class {"wrk " + (current == 5 ? "active-workspace" : (matches(names, 5) ? "exist-workspace" : "no-workspace"))} (label :text 5))
    ; (box :class {"wrk " + (current == 6 ? "active-workspace" : (matches(names, 6) ? "exist-workspace" : "no-workspace"))} (label :text 6))
    (box :class {"wrk " + (current == 7 ? "active-workspace" : (matches(names, 7) ? "exist-workspace" : "no-workspace"))} (label :text "z"))
    (box :class {"wrk " + (current == 8 ? "active-workspace" : (matches(names, 8) ? "exist-workspace" : "no-workspace"))} (label :text "x"))
    (box :class {"wrk " + (current == 9 ? "active-workspace" : (matches(names, 9) ? "exist-workspace" : "no-workspace"))} (label :text "c"))
))

(defwidget nnuull []
"null")


; ..:: Utilities ::..

(defpoll time :interval "5s" :initial `{"hour":99, "min":99}`
  `date +'{"hour": "%H","min":"%M","year":"%Y", "abbrDay":"%a", "fullDay":"%A", "abbrMonth":"%b", "fullMonth":"%B", "day":"%d"}'`)

(deflisten music :initial ""
  "playerctl --follow metadata --format '[\"{{ artist }}\",\"{{ title }}\"]' || true")

(deflisten key-layout :initial "na" "stdbuf -o0 klc")

(deflisten active-workspaces :initial "N/A" "xprop -root -spy _NET_DESKTOP_NAMES")
; (defvar wkps '${captures(active-workspace, "\"[0-9]\"")}' )
(deflisten current-workspace-index :initial "" "xprop -spy -root _NET_CURRENT_DESKTOP")
